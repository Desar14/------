#Использовать v8runner
#Использовать gitrunner
#Использовать logos

#Использовать "Модули"

Перем Лог;
Перем РепозиторийGit;

Функция ПроверитьПараметрыКоманды(КаталогРепозитория, Лог)
	
	ФайлКаталогРепозитория = Новый Файл(КаталогРепозитория);
	
	Если НЕ ФайлКаталогРепозитория.Существует() ИЛИ ФайлКаталогРепозитория.ЭтоФайл() Тогда
		
		Лог.Ошибка("Каталог репозитория '%1' не существует или это файл", КаталогРепозитория);
		Возврат Ложь;
		
	КонецЕсли;
	
	Лог.Вывести("Тестовый лог", УровниЛога.Информация);
	
	КаталогРепозитория = ФайлКаталогРепозитория.ПолноеИмя;
	
	РепозиторийGit = Новый ГитРепозиторий();
	РепозиторийGit.УстановитьРабочийКаталог(КаталогРепозитория);
	
	Если НЕ РепозиторийGit.ЭтоРепозиторий() Тогда
		
		Лог.Ошибка("Каталог '%1' не является репозиторием git", КаталогРепозитория);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗапускПриложения()
	
	КаталогРепозитория = "D:\1C\21vek\выгрузка обработок\репозиторий";
	
	ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогРепозитория, "src");
	
	// Логирование
	Лог = Логирование.ПолучитьЛог("oscript.app.erfexport");
	//Лог.УстановитьРаскладку(ОбъектНастроек);
	
	ПроверитьПараметрыКоманды(КаталогРепозитория, Лог);
	
	ЖурналИзменений = ПолучитьЖурналИзменений();
	
	ФайлыКОбработке = Новый ТаблицаЗначений();
	ФайлыКОбработке.Колонки.Добавить("Файл");
	ФайлыКОбработке.Колонки.Добавить("ТипИзменения");
	
	ПараметрыОбработки = ПолучитьСтандартныеПараметрыОбработки();
	ПараметрыОбработки.Лог = Лог;
	ПараметрыОбработки.КаталогРепозитория = КаталогРепозитория;
	ПараметрыОбработки.ТекущийКаталогИсходныхФайлов = ТекущийКаталогИсходныхФайлов;
	
	Для каждого Изменение Из ЖурналИзменений Цикл
		ДобавитьКОбработке(ФайлыКОбработке, Новый Файл(ОбъединитьПути(КаталогРепозитория, Изменение.ИмяФайла)),
			Изменение.ТипИзменения);
	КонецЦикла;
	
	ВыполнитьОбработкуФайлов(ФайлыКОбработке, ПараметрыОбработки);
	
	ЗавершитьРаботу(0);
	
КонецПроцедуры


Процедура ВыполнитьОбработкуФайлов(Файлы, ПараметрыОбработки)
	
	КаталогРепозитория = ПараметрыОбработки.КаталогРепозитория;
	Ит = 0;
	Пока Ит < Файлы.Количество() Цикл
		
		АнализируемыйФайл = Файлы[Ит].Файл;
		Лог.Отладка("Анализируется файл <%1>", АнализируемыйФайл.Имя);
		
		ИмяФайла = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория,
				СтрЗаменить(АнализируемыйФайл.ПолноеИмя, КаталогРепозитория, ""));
				
		ПараметрыОбработки.ТипИзменения = Файлы[Ит].ТипИзменения;
		
		
		
		ФайлОбработан = РазборОтчетовОбработокРасширений.ОбработатьФайл(АнализируемыйФайл,
				ПараметрыОбработки.ТекущийКаталогИсходныхФайлов,
				ПараметрыОбработки);
		
		Если НЕ ФайлОбработан Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлДляДопОбработки Из ПараметрыОбработки.ФайлыДляПостОбработки Цикл
			
			ДобавитьКОбработке(Файлы, ФайловыеОперации.НовыйФайл(ФайлДляДопОбработки), "Изменен");
			
		КонецЦикла;
		
		ПараметрыОбработки.ФайлыДляПостОбработки.Очистить();	
		
		Ит = Ит + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьРаботуПриложения(Знач КодВозврата = Неопределено) Экспорт
	
	Если КодВозврата = Неопределено Тогда
		КодВозврата = РезультатыКоманд().Успех;
	КонецЕсли;
	
	ЗавершитьРаботу(КодВозврата);
	
КонецПроцедуры

Функция ПолучитьСтандартныеПараметрыОбработки() Экспорт
	
	
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ФайлыДляПостОбработки", Новый Массив);
	ПараметрыОбработки.Вставить("ИзмененныеКаталоги", Новый Массив);
	ПараметрыОбработки.Вставить("Лог", Лог);
	ПараметрыОбработки.Вставить("КаталогРепозитория", Неопределено);
	ПараметрыОбработки.Вставить("ТекущийКаталогИсходныхФайлов", Неопределено);
	ПараметрыОбработки.Вставить("Настройки", Неопределено);
	ПараметрыОбработки.Вставить("ТипИзменения", "Изменен");
	ПараметрыОбработки.Вставить("ЗатребованныеСценарии", Новый Массив);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция РезультатыКоманд() Экспорт
	
	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("Успех", 0);
	РезультатыКоманд.Вставить("НеверныеПараметры", 5);
	РезультатыКоманд.Вставить("ОшибкаВремениВыполнения", 1);
	
	Возврат РезультатыКоманд;
	
КонецФункции // РезультатыКоманд

Функция ПолучитьЖурналИзменений()
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("add *.*");
	РепозиторийGit.ВыполнитьКоманду(ПараметрыКомандыGit);

	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("diff --name-status --staged --no-renames");
	РепозиторийGit.ВыполнитьКоманду(ПараметрыКомандыGit);
	РезультатВывода = РепозиторийGit.ПолучитьВыводКоманды();
	СтрокиВывода = СтрРазделить(РезультатВывода, Символы.ПС);
	ЖурналИзменений = Новый Массив;
	
	Для Каждого СтрокаВывода Из СтрокиВывода Цикл
		
		Лог.Отладка("	<%1>", СтрокаВывода);
		
		СтрокаВывода = СокрЛП(СтрокаВывода);
		ПозицияПробела = СтрНайти(СтрокаВывода, Символы.Таб);
		СимволИзменения = Лев(СтрокаВывода, 1);
		
		ТипИзменения = ВариантИзмененийФайловGit.ОпределитьВариантИзменения(СимволИзменения);
		ИмяФайла = СокрЛП(СтрЗаменить(Сред(СтрокаВывода, ПозицияПробела + 1), """", ""));
		ЖурналИзменений.Добавить(Новый Структура("ИмяФайла, ТипИзменения", ИмяФайла, ТипИзменения));
		
		Лог.Отладка("		В журнале git %2 файл <%1>", ИмяФайла, ТипИзменения);
		
	КонецЦикла;
	
	Возврат ЖурналИзменений;
	
КонецФункции

Процедура ДобавитьКОбработке(СпиоскФ, ДобавляемыйФ, ТипИзменения)
	Строка = СпиоскФ.Добавить();
	Строка.Файл = ДобавляемыйФ;
	Строка.ТипИзменения = ТипИзменения;
КонецПроцедуры

ЗапускПриложения();